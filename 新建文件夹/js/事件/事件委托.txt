一：事件委托
 （1）：什么是事件委托
	比如一个ul下有100个或者更多的li,需求是点击li弹出1，如果我们给每个li都绑定了click事件,
    页面的运行效率也会变低，所以如果用事件委托，那么我们就可以只对它的父级（如果只有一个父级）
    这一个对象进行操作，这样我们就需要一个内存空间就够了，是不是省了很多，自然性能就会更好。
 （2）：事件委托的原理
	事件委托是利用事件的冒泡原理来实现的，何为事件冒泡呢？就是事件从最深的节点开始，然后逐步向上传播事件，
    下面的例子，点击li的时候，他会向上传播事件，然后但事件的target(目标对象)是li,所以if ( $target.is("li") ) 
     经过这么一判断，就绑定好了

  （3）：事件委托怎么实现：
	Event对象提供了一个属性叫target，可以返回事件的目标节点，我们称为事件源，
jQuery:
$("ul").click(function(event) {
  var $target = $(event.target);
  if ( $target.is("li") ) {
    $target.css("background-color", "red");
  }
});
JS:
window.onload = function(){
　　var oUl = document.getElementById("ul1");
　　oUl.onclick = function(ev){
　　　　var ev = ev || window.event;
　　　　var target = ev.target || ev.srcElement;
　　　　if(target.nodeName.toLowerCase() == 'li'){
　 　　　　　　	alert(123);
　　　　　　　  alert(target.innerHTML);
　　　　}
　　}
}

看，上面是用事件委托的方式，新添加的子元素是带有事件效果的，我们可以发现，当用事件委托的时候，
根本就不需要去遍历元素的子节点，只需要给父级元素添加事件就好了，其他的都是在js里面的执行，
这样可以大大的减少dom操作，这才是事件委托的精髓所在。

适合用事件委托的事件：click，mousedown，mouseup，keydown，keyup，keypress。

值得注意的是，mouseover和mouseout虽然也有事件冒泡，但是处理它们的时候需要特别的注意，因为需要经常计算它们的位置，处理起来不太容易。

不适合的就有很多了，举个例子，mousemove，每次都要计算它的位置，非常不好把控，在不如说focus，blur之类的，本身就没用冒泡的特性，自然就不能用事件委托了。

http://www.cnblogs.com/liugang-vip/p/5616484.html
   