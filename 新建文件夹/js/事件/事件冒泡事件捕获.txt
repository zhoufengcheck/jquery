事件捕获阶段：事件从最上一级标签开始往下查找，直到捕获到事件目标(target)。（从外到里 IE不支持事件捕获）
事件冒泡阶段：事件从事件目标(target)开始，往上冒泡直到页面的最上一级标签。（从里到外）
 

(1)dom0级事件 传统绑定方法
  
   在一个支持W3C DOM的浏览器中，像这样一般的绑定事件方式，是采用的事件冒泡方式。
   ele.onclick = doSomething2
   解除绑定 ele.onclick=null

(2)dom2级绑定 W3C模型

   W3C模型是将两者进行中和，
   在W3C模型中，任何事件发生时，先从顶层开始进行事件捕获，直到事件触发到达了事件源元素。
   然后，再从事件源往上进行事件冒泡，直到到达document。

   程序员可以自己选择绑定事件时采用事件捕获还是事件冒泡，方法就是绑定事件时通过addEventListener函
   它有三个参数，
     ele.addEventListener('click',doSomething2,true)

     第三个参数若是true，则表示采用事件捕获，若是false，则表示采用事件冒泡。
     true=捕获
     false=冒泡
 
   解除绑定：element.removeEventListener(event, function, useCapture)
   注意：function不能是匿名的函数，不然找不到该函数，解除不了，所以在绑定时就要注意
         useCapture是boolean值，true=捕获  false=冒泡

（3）IE浏览器
   如上面所说，IE只支持事件冒泡，不支持事件捕获，它也不支持addEventListener函数，不会用第三个参数来表示是冒泡还是捕获，它提供了另一个函数attachEvent。
   绑定事件：ele.attachEvent("onclick", doSomething2);
   解除绑定：elem.detachEvent(event_type,event_name)；
   附：事件冒泡（的过程）：事件从发生的目标（event.srcElement||event.target）开始，沿着文档逐层向上冒泡，到document为止。



	/*************绑定  兼容写法*****************/
	function addEvent(obj, eventType, callback, bubble){
		if(obj.addEventListener){
		 	obj.addEventListener(eventType, callback, bubble);
		}else{//如果不兼容就用attachEvent
			obj.attachEvent(eventType, callback, bubble);
		}
	}
	/*************取消绑定  兼容写法*****************/
	function removeEvent(obj, eventType, callback, bubble){
		if(obj.removeEventListener){
		 	obj.removeEventListener(eventType, callback, bubble);
		}else{//如果不兼容就用attachEvent
			obj.detachEvent(eventType, callback, bubble);
		}
	}
	/*************阻止冒泡  兼容写法*****************/
	function stopBubble(e){
		　　if(e&&e.stopPropagation){//非IE
		　　   e.stopPropagation();
		　　}
		　　else{//IE
		　　   window.event.cancelBubble=true;
		　　}
　　}

