1:闭包的概念："定义在一个函数内部的函数
function f1(){
　　　　var n=999;
　　　　function f2(){
　　　　　　alert(n); 
　　　　}
　　　　return f2;
　　}
　　var result=f1();
　　result(); // 999

由于作用域的原因，外部无法直接去访问函数内部的变量，如果利用闭包的话，
就可以将函数内部和函数外部连接起来，如上面的例子。

2：闭包的用途
  它的最大用处有两个，
	一个是前面提到的可以读取函数内部的变量，
	二是就是让这些变量的值始终保持在内存中。

3：使用闭包的注意点

   变量不释放

4：
　var name = "The Window";
　　var object = {
　　　　name : "My Object",
　　　　getNameFunc : function(){
		//1:this 
　　　　　　return function(){
		//2:this
　　　　　　　　return this.name;
　　　　　　};
　　　　}
　　};
　　alert(object.getNameFunc()());//the Window
解释：因为当一个函数作为函数而不是方法来调用的时候，this指向的是全局对象，这在《Javascript权威指南》上说的很清楚



　var name = "The Window";
　　var object = {
　　　　name : "My Object",
　　　　getNameFunc : function(){
　　　　　　var that = this;
　　　　　　return function(){
　　　　　　　　return that.name;
　　　　　　};
　　　　}
　　};
　　alert(object.getNameFunc()());//My Object
解释：把this用变量保存下来了

5：题目
     for (var i=1; i<=5; i++) { 
      (function(i){
          setTimeout( function timer() {
            console.log(i);///6,6,6,6,6
        }, i*1000 );
      })(i)
        
    }
解决了输出66666的问题


