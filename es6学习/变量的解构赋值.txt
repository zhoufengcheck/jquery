数组的解构赋值
	1:基本
		let [a, b, c] = [1, 2, 3];//表示let a = 1;let b = 2;let c = 3;
		let [a,,b]=[1,2,3]//表示let a=1,let b=3
		let [head,...tail]=[1,2,3]//表示let head=1;let tail=[2,3];

		如果解构不成功，变量的值就等于undefined。
		let [foo] = [];//表示 foo等于undefined
		let [bar, foo] = [1];//表示 foo等于undefined;let bar=1 
		
		如果等号的右边不是数组,那么将会报错。
		let [foo] = 1;
		let [foo] = false;

		对于 Set 结构，也可以使用数组的解构赋值。
		let [x, y, z] = new Set(['a', 'b', 'c']);

	2:默认值,解构赋值允许指定默认值。
		let [foo = true] = [];   foo // true

		let [x, y = 'b'] = ['a']; // x='a', y='b'
		let [x, y = 'b'] = ['a', undefined]; // x='a', y='b'
		ES6 内部使用严格相等运算符（===），判断一个位置是否有值。所以，如果一个数组成员不严格等于undefined，默认值是不会生效的。

对象的解构赋值
	1:基本
		本质：
		let { foo: foo, bar: bar } = { foo: "aaa", bar: "bbb" };

			解析后：var _foo$bar = { foo: "aaa", bar: "bbb" },
				    foo = _foo$bar.foo,
				    bar = _foo$bar.bar;

		简写：
		let { foo, bar } = { foo: "aaa", bar: "bbb" };表示 let foo="aaa";let bar="bbb";

		如果变量名与属性名不一致
		let obj = { first: 'hello', last: 'world' };
		let { first: f, last: l } = obj;
		f // 'hello'
		l // 'world'

		总结：也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。
		let { foo: baz } = { foo: "aaa", bar: "bbb" };
		baz // "aaa"
		foo // error: foo is not defined  只是赋值给后者，而不是前者

	2：嵌套，和数组一样，解构也可以用于嵌套结构的对象。
		let obj={
		  name:"zhoufeng",
		  address:[
		    "beijing",
		    {
		      mail:"11987"
		    }
		    ]
		}
		let{name,address:[b,{mail}]}=obj//address只是一个模式，不是变量，因此不会被赋值

		注意：对象---》写属性名的时候名字要对的上

		let obj={};
		let arr=[];

		( {foo:obj.a,bar:arr[0]}={foo:1,bar:3})
		console.log(obj)//{a:1}

	3:默认值
		var {x = 3} = {};//x=3
		var {x, y = 5} = {x: 1};// x=1 ,y=5
		var {x:y = 3} = {};//y=3
		默认值生效的条件是，对象的属性值严格等于undefined。
		var {x = 3} = {x: undefined};

	4:由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。
			
		let arr = [1, 2, 3];
		let {0 : first, [arr.length - 1] : last} = arr;
		first // 1
		last // 3

字符串的解构赋值
	1:
	const [a, b, c, d, e] = 'hello';
	a // "h"
	b // "e"
	c // "l"
	d // "l"
	e // "o"

	2:
	let {length : len} = 'hello';
	len // 5

数值和布尔值的解构赋值
	
	let {toString: s} = 123;
	s === Number.prototype.toString // true

	let {toString: s} = true;
	s === Boolean.prototype.toString // true

函数参数的解构赋值

	1：
	function add([x, y]){
	  return x + y;
	}
	console.log(add([1, 2]))///3

	2函数参数的解构也可以使用默认值。
	function move({x = 0, y = 0} = {}) {
	  return [x, y];
	}

	move({x: 3, y: 8}); // [3, 8]
	move({x: 3}); // [3, 0]
	move({}); // [0, 0]
	move(); // [0, 0]

不能使用圆括号的情况 
	1:变量声明语句中，不能带有圆括号。

		let [(a)] = [1];
		let {x: (c)} = {};
	2:函数参数中，模式不能带有圆括号

		function f([(z)]) { return z; }
	3:赋值语句中，不能将整个模式，或嵌套模式中的一层，放在圆括号之中。

		({ p: a }) = { p: 42 };
		([a]) = [5];
	4可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。

		[(b)] = [3]; // 正确
		({ p: (d) } = {}); // 正确
		[(parseInt.prop)] = [3]; // 正确

用途
	1交换变量的值
		let x = 1;
		let y = 2;

		[x, y] = [y, x];
	2:从函数返回多个值
		function example() {
		  return [1, 2, 3];
		}
		let [a, b, c] = example();

	3函数参数的定义

		解构赋值可以方便地将一组参数与变量名对应起来。

		// 参数是一组有次序的值
		function f([x, y, z]) { ... }
		f([1, 2, 3]);

		// 参数是一组无次序的值
		function f({x, y, z}) { ... }
		f({z: 3, y: 2, x: 1});

	4提取JSON数据
		let jsonData = {
		  id: 42,
		  status: "OK",
		  data: [867, 5309]
		};

		let { id, status, data: number } = jsonData;

		console.log(id, status, number);

	
